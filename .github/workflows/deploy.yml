name: Deploy to Production

on:
  push:
    branches: ["main"]

concurrency:
  group: "prod-deploy"
  cancel-in-progress: false

jobs:
  migrate_db:
    name: Run DB migrations (Neon)
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install backend deps
        working-directory: backend
        run: |
          pip install -U pip
          pip install -r requirements.txt

      - name: Apply migrations
        working-directory: backend  #for alembic.ini
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PYTHONPATH: ${{ github.workspace }}/backend
        run: alembic upgrade head

  deploy_api:
    name: Deploy API to Fly.io
    needs: migrate_db
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Fly deploy
        working-directory: backend  #for fly.toml + Dockerfile
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl deploy --remote-only --strategy rolling --wait-timeout 600

  deploy_web:
    name: Deploy Web to Vercel
    needs: deploy_api
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/frontend-fitness/package-lock.json
      
      #Links this folder to Vercel project (creates .vercel/project.json if missing) and Downloads Production env vars/settings into .vercel/ so the build can use them.
      - name: Pull Vercel env
        working-directory: frontend/frontend-fitness
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          test -f .vercel/project.json || npx vercel@latest link --yes --token "$VERCEL_TOKEN" --project "$VERCEL_PROJECT_ID"
          npx vercel@latest pull --yes --environment=production --token "$VERCEL_TOKEN"

      #Installs dependenciess with `npm ci`. Runs `vercel build` to make a prebuilt output in .vercel/output/. This lets us build in GitHub Actions instead of on Vercel’s servers
      - name: Install & build (CI)
        working-directory: frontend/frontend-fitness
        run: |
          npm ci
          npx vercel@latest build
      
      #Uploads the already-built .vercel/output/ to Production. Uses `--prebuilt`, so Vercel doesn’t reinstall or rebuild—just goes live.
      - name: Deploy prebuilt to Vercel
        working-directory: frontend/frontend-fitness
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npx vercel@latest deploy --prod --prebuilt --token "$VERCEL_TOKEN"
          
